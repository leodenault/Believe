package believe.character

import com.google.common.truth.Truth.assertThat
import org.junit.jupiter.api.Test

internal class VulnerabilityStateMachineTest {
    private val machine = VulnerabilityStateMachine(
        INVULNERABILITY_LENGTH, FLASHING_LENGTH, MAX_FOCUS, FOCUS_RECHARGE_TIME
    )

    @Test
    fun isVulnerable_isTrue() {
        assertThat(machine.isVulnerable).isTrue()
    }

    @Test
    fun isAnimationVisible_isTrue() {
        assertThat(machine.isAnimationVisible).isTrue()
    }

    @Test
    fun new_focusIsAtMax() {
        var focus = 0f
        machine.focus.addObserver { newValue -> focus = newValue }
        machine.inflictDamage(0.1f)

        assertThat(focus).isEqualTo(MAX_FOCUS - 0.1f)
    }

    @Test
    fun isVulnerable_damageInflicted_withinInvulnerabilityPeriod_isFalse() {
        machine.inflictDamage(0f)

        assertThat(machine.isVulnerable).isFalse()
    }

    @Test
    fun isAnimationVisible_damageInflicted_withinFlashingPeriod_isFalse() {
        machine.inflictDamage(0f)

        val animationVisible1 = machine.isAnimationVisible
        machine.update(FLASHING_LENGTH - 1)
        val animationVisible2 = machine.isAnimationVisible
        machine.update(1 + FLASHING_LENGTH)
        val animationVisible3 = machine.isAnimationVisible

        assertThat(animationVisible1).isFalse()
        assertThat(animationVisible2).isFalse()
        assertThat(animationVisible3).isFalse()
    }

    @Test
    fun isVulnerable_damageInflicted_outsideInvulnerabilityPeriod_isFalse() {
        machine.inflictDamage(0f)
        machine.update(INVULNERABILITY_LENGTH)

        assertThat(machine.isVulnerable).isTrue()
    }

    @Test
    fun isAnimationVisible_damageInflicted_outsideFlashingPeriod_isTrue() {
        machine.inflictDamage(0f)

        machine.update(FLASHING_LENGTH)
        val animationVisible1 = machine.isAnimationVisible
        machine.update(FLASHING_LENGTH - 1)
        val animationVisible2 = machine.isAnimationVisible
        machine.update(1 + FLASHING_LENGTH)
        val animationVisible3 = machine.isAnimationVisible

        assertThat(animationVisible1).isTrue()
        assertThat(animationVisible2).isTrue()
        assertThat(animationVisible3).isTrue()
    }

    @Test
    fun isAnimationVisible_damageInflicted_withinFlashingPeriodButOutsideInvulnerabilityPeriod_isTrue() {
        machine.inflictDamage(0f)

        machine.update(INVULNERABILITY_LENGTH)
        val animationVisible1 = machine.isAnimationVisible
        machine.update(FLASHING_LENGTH)
        val animationVisible2 = machine.isAnimationVisible
        machine.update(FLASHING_LENGTH)
        val animationVisible3 = machine.isAnimationVisible

        assertThat(animationVisible1).isTrue()
        assertThat(animationVisible2).isTrue()
        assertThat(animationVisible3).isTrue()
    }

    @Test
    fun inflictDamage_isInvulnerable_doesNothing() {
        var focus = 0f
        machine.focus.addObserver { newValue -> focus = newValue }

        machine.inflictDamage(0.1f)
        machine.inflictDamage(0.1f)
        val unaffectedFocus = focus

        machine.update(INVULNERABILITY_LENGTH - 1)
        machine.inflictDamage(0.1f)
        machine.update(1)

        assertThat(unaffectedFocus).isEqualTo(MAX_FOCUS - 0.1f)
        assertThat(machine.isVulnerable).isTrue()
    }

    @Test
    fun inflictDamage_updatesListenersWithHealth() {
        var focus = 0f
        machine.focus.addObserver { newValue -> focus = newValue }

        machine.inflictDamage(0.3f)

        assertThat(focus).isEqualTo(MAX_FOCUS - 0.3f)
    }

    @Test
    fun inflictDamage_damageExceedsRemainingFocus_resultsInZeroFocus() {
        var focus = 0f
        machine.focus.addObserver { newValue -> focus = newValue }

        machine.inflictDamage(MAX_FOCUS + 1000f)

        assertThat(focus).isEqualTo(0f)
    }

    @Test
    fun update_replenishesFocus() {
        var focus = 0f
        machine.focus.addObserver { newValue -> focus = newValue }
        machine.inflictDamage(MAX_FOCUS / 2)

        machine.update(FOCUS_RECHARGE_TIME / 4)

        assertThat(focus).isWithin(0.01f).of(MAX_FOCUS * 0.75f)
    }

    @Test
    fun update_focusAtMax_doesNotAddMoreFocus() {
        var focus = 0f
        machine.focus.addObserver { newValue -> focus = newValue }
        machine.inflictDamage(MAX_FOCUS)
        machine.update(FOCUS_RECHARGE_TIME * 2)

        assertThat(focus).isEqualTo(MAX_FOCUS)
    }

    companion object {
        private const val INVULNERABILITY_LENGTH = 100L
        private const val FLASHING_LENGTH = 4L
        private const val MAX_FOCUS = 12f
        private const val FOCUS_RECHARGE_TIME = 24L
    }
}
