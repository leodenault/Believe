package believe.gui

import believe.core.display.Graphics
import believe.geometry.Rectangle
import believe.geometry.rectangle

/**
 * A container that lays out its children based on relative coordinates.
 *
 * @param G the type of the children contained in this instance.
 */
class CanvasContainerV2<G : GuiElement>(val children: List<G>) : GuiElement {

    override fun render(g: Graphics) = children.forEach { it.render(g) }

    override fun bind() = children.forEach(GuiElement::bind)

    override fun unbind() = children.forEach(GuiElement::unbind)

    /**
     * Creates instances of [CanvasContainerV2].
     *
     * @param G the type of the children contained in the [CanvasContainerV2] built by the builder.
     */
    class Builder<G : GuiElement> : LayoutBuilder<Unit, CanvasContainerV2<G>> {
        val children: MutableList<(GuiLayoutFactory, Rectangle) -> G> = mutableListOf()

        /**
         * Runs [createChild] and adds the returned child to the container generated by this builder.
         */
        inline fun <reified C, T : G> add(crossinline createChild: () -> Child<C, T>) {
            children.add { guiLayoutFactory, positionData ->
                val child = createChild()
                guiLayoutFactory.create(
                    child.builder, rectangle(
                        positionData.x + child.topLeft.first * positionData.width,
                        positionData.y + child.topLeft.second * positionData.height,
                        (child.bottomRight.first - child.topLeft.first) * positionData.width,
                        (child.bottomRight.second - child.topLeft.second) * positionData.height
                    )
                )
            }
        }

        /** Defines the top-left corner of a child of the [CanvasContainerV2] using [coords]. */
        inline infix fun <reified C, T : GuiElement> LayoutBuilder<C, T>.from(
            coords: Pair<Float, Float>
        ): ChildBuilder<C, T> = ChildBuilder(this, coords)

        /** Shorthand for defining a [Pair] of points. */
        fun p(x: Float, y: Float): Pair<Float, Float> = Pair(x, y)

        override fun build(
            configuration: Unit, guiLayoutFactory: GuiLayoutFactory, positionData: Rectangle
        ) = CanvasContainerV2(children.map { it(guiLayoutFactory, positionData) })
    }

    /** A child of a [CanvasContainerV2]. */
    class Child<C, T : GuiElement> internal constructor(
        val builder: LayoutBuilder<C, T>,
        val topLeft: Pair<Float, Float>,
        val bottomRight: Pair<Float, Float>
    )

    /** A builder that creates instances of [Child]. */
    class ChildBuilder<C, T : GuiElement> constructor(
        private val builder: LayoutBuilder<C, T>, private val topLeft: Pair<Float, Float>
    ) {
        /** Defines the bottom-right corner of a child of the [CanvasContainerV2] using [coords]. */
        infix fun to(coords: Pair<Float, Float>): Child<C, T> = Child(builder, topLeft, coords)
    }
}
